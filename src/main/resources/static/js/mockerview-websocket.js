class MockerViewWebSocket {
  constructor(sessionId, userId, userName) {
    this.sessionId = sessionId;
    this.userId = userId;
    this.userName = userName;
    this.stompClient = null;
    this.connected = false;
    this.timerInterval = null;
    this.currentSeconds = 0;
  }

  connect() {
    const token = this.getTokenFromCookie();
    if (!token) {
      console.error('‚ùå ÌÜ†ÌÅ∞ ÏóÜÏùå');
      alert('Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    console.log('üîå WebSocket Ïó∞Í≤∞ ÏãúÎèÑ...', {
      sessionId: this.sessionId,
      userId: this.userId,
      userName: this.userName
    });
    
    const socket = new SockJS("/ws?token=" + encodeURIComponent(token));
    this.stompClient = Stomp.over(socket);
    
    this.stompClient.debug = null;
    
    this.stompClient.connect({}, (frame) => {
      console.log("‚úÖ WebSocket STOMP Ïó∞Í≤∞ ÏÑ±Í≥µ");
      this.connected = true;
      
      this.subscribeToTopics();
      
      setTimeout(() => {
        this.joinSession();
      }, 100);
      
    }, (error) => {
      console.error("‚ùå WebSocket Ïó∞Í≤∞ Ïã§Ìå®:", error);
      alert('WebSocket Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      this.connected = false;
    });
  }

  getTokenFromCookie() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'Authorization') return value;
    }
    return null;
  }

  subscribeToTopics() {
    console.log('üì° ÌÜ†ÌîΩ Íµ¨ÎèÖ ÏãúÏûë...');
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/status`, (message) => {
      console.log('üìä Status Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleStatusUpdate(JSON.parse(message.body));
    });
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/question`, (message) => {
      console.log('‚ùì Question Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleNewQuestion(JSON.parse(message.body));
    });
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/answer`, (message) => {
      console.log('üí¨ Answer Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleNewAnswer(JSON.parse(message.body));
    });
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/feedback`, (message) => {
      console.log('ü§ñ Feedback Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleNewFeedback(JSON.parse(message.body));
    });
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/interviewer-feedback`, (message) => {
      console.log('üëî Interviewer Feedback Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleInterviewerFeedback(JSON.parse(message.body));
    });
    
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/control`, (message) => {
      console.log('üéÆ Control Î©îÏãúÏßÄ ÏàòÏã†');
      this.handleControlMessage(JSON.parse(message.body));
    });
    
    console.log('‚úÖ Î™®Îì† ÌÜ†ÌîΩ Íµ¨ÎèÖ ÏôÑÎ£å');
  }

  joinSession() {
    if (!this.connected) {
      console.warn('‚ö†Ô∏è WebSocketÏù¥ ÏïÑÏßÅ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§');
      return;
    }
    
    if (!this.stompClient) {
      console.error('‚ùå stompClientÍ∞Ä nullÏûÖÎãàÎã§');
      return;
    }
    
    const joinMessage = {
      sessionId: this.sessionId,
      userId: this.userId,
      userName: this.userName,
      action: "JOIN"
    };
    
    console.log('üì® ÏÑ∏ÏÖò Ï∞∏Í∞Ä Î©îÏãúÏßÄ Ï†ÑÏÜ°:', joinMessage);
    console.log('üìç Ï†ÑÏÜ° Í≤ΩÎ°ú:', `/app/session/${this.sessionId}/join`);
    
    try {
      this.stompClient.send(
        `/app/session/${this.sessionId}/join`, 
        {}, 
        JSON.stringify(joinMessage)
      );
      console.log('‚úÖ ÏÑ∏ÏÖò Ï∞∏Í∞Ä Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå ÏÑ∏ÏÖò Ï∞∏Í∞Ä Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', error);
    }
  }

  handleControlMessage(data) {
    console.log('üéÆ Ï†úÏñ¥ Î©îÏãúÏßÄ Ï≤òÎ¶¨:', data);
    const badge = document.getElementById('sessionStatusBadge');
    
    if (data.action === 'START') {
      alert('Î©¥Ï†ëÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!');
      if (badge) {
        badge.textContent = 'ÏßÑÌñâÏ§ë';
        badge.className = 'status-badge ongoing';
      }
    } else if (data.action === 'PAUSE') {
      alert('Î©¥Ï†ëÏù¥ ÏùºÏãúÏ†ïÏßÄÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'ÏùºÏãúÏ†ïÏßÄ';
        badge.className = 'status-badge paused';
      }
    } else if (data.action === 'RESUME') {
      alert('Î©¥Ï†ëÏù¥ Ïû¨Í∞úÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'ÏßÑÌñâÏ§ë';
        badge.className = 'status-badge ongoing';
      }
    } else if (data.action === 'END') {
      alert('Î©¥Ï†ëÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'Ï¢ÖÎ£åÎê®';
        badge.className = 'status-badge ended';
      }
    }
  }

  leaveSession() {
    if (this.connected && this.stompClient) {
      console.log('üëã ÏÑ∏ÏÖò Ìá¥Ïû• Î©îÏãúÏßÄ Ï†ÑÏÜ°');
      this.stompClient.send(`/app/session/${this.sessionId}/leave`, {}, JSON.stringify({
        sessionId: this.sessionId,
        userId: this.userId,
        userName: this.userName,
        action: "LEAVE"
      }));
    }
  }

  sendQuestion(questionText, orderNo, timer) {
    if (!this.connected) {
      alert('WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }
    
    const payload = {
      text: questionText,
      orderNo: parseInt(orderNo) || 1,
      timerSeconds: parseInt(timer) || 60,
      sessionId: this.sessionId
    };
    
    console.log('üì§ ÏßàÎ¨∏ Ï†ÑÏÜ°:', payload);
    this.stompClient.send(`/app/session/${this.sessionId}/question`, {}, JSON.stringify(payload));
  }

  sendControlMessage(action) {
    if (!this.connected) {
      console.warn('‚ö†Ô∏è WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§');
      return;
    }
    
    console.log('üéÆ Ï†úÏñ¥ Î©îÏãúÏßÄ Ï†ÑÏÜ°:', action);
    this.stompClient.send(`/app/session/${this.sessionId}/control`, {}, JSON.stringify({
      action: action,
      timestamp: new Date().toISOString()
    }));
  }

  stopTimer() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = null;
    }
  }

  submitAnswer(questionId, answerText) {
    if (!this.connected) {
      alert('WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }
    
    const payload = {
      sessionId: this.sessionId,
      questionId: parseInt(questionId),
      userId: this.userId,
      userName: this.userName,
      answerText: answerText
    };
    
    console.log('üì§ ÎãµÎ≥Ä Ï†úÏ∂ú:', payload);
    this.stompClient.send(`/app/session/${this.sessionId}/answer`, {}, JSON.stringify(payload));
  }

  submitInterviewerFeedback(answerId, score, comment) {
    if (!this.connected) {
      alert('WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }
    
    this.stompClient.send(`/app/session/${this.sessionId}/interviewer-feedback`, {}, JSON.stringify({
      sessionId: this.sessionId,
      answerId: answerId,
      reviewerId: this.userId,
      reviewerName: this.userName,
      score: score,
      comment: comment
    }));
  }

  handleStatusUpdate(message) {
    console.log('üìä ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', message);
    
    if (message.participants && Array.isArray(message.participants)) {
      this.updateParticipantsList(message.participants);
    }
    
    if (message.questionCount !== undefined && message.answerCount !== undefined) {
      this.updateSessionStats(message.questionCount, message.answerCount);
    }
    
    if (message.action === "JOIN" && message.userName) {
      this.showNotification(message.userName + "ÎãòÏù¥ ÏûÖÏû•ÌñàÏäµÎãàÎã§. üëã");
    } else if (message.action === "LEAVE" && message.userName) {
      this.showNotification(message.userName + "ÎãòÏù¥ Ìá¥Ïû•ÌñàÏäµÎãàÎã§. üëã");
    }
    
    if (message.status) {
      const badge = document.getElementById('sessionStatusBadge');
      if (badge) {
        const statusMap = {
          'RUNNING': { text: 'ÏßÑÌñâÏ§ë', className: 'status-badge ongoing' },
          'PAUSED': { text: 'ÏùºÏãúÏ†ïÏßÄ', className: 'status-badge paused' },
          'ENDED': { text: 'Ï¢ÖÎ£åÎê®', className: 'status-badge ended' },
          'DEFAULT': { text: 'ÎåÄÍ∏∞Ï§ë', className: 'status-badge waiting' }
        };
        const status = statusMap[message.status] || statusMap['DEFAULT'];
        badge.textContent = status.text;
        badge.className = status.className;
      }
    }
  }

  handleNewQuestion(message) {
    console.log("‚ùì ÏÉà ÏßàÎ¨∏ Ï≤òÎ¶¨:", message);
    
    const questionTextElement = document.getElementById('current-question-text');
    if (questionTextElement) {
      questionTextElement.textContent = message.questionText || message.text || 'ÏßàÎ¨∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...';
    }
    
    const questionIdInput = document.getElementById("currentQuestionId");
    if (questionIdInput) {
      questionIdInput.value = message.questionId || message.id || "";
    }
    
    const questionNumber = document.getElementById("question-number");
    if (questionNumber) {
      questionNumber.textContent = "Q" + (message.orderNo || message.order || 1);
    }
    
    const timerSeconds = message.timer || message.timerSeconds;
    if (timerSeconds && timerSeconds > 0) {
      this.currentSeconds = timerSeconds;
      this.stopTimer();
      
      const timerElement = document.getElementById('question-timer');
      this.timerInterval = setInterval(() => {
        if (this.currentSeconds > 0) {
          this.currentSeconds--;
          const minutes = Math.floor(this.currentSeconds / 60);
          const seconds = this.currentSeconds % 60;
          
          if (timerElement) {
            timerElement.textContent = "‚è±Ô∏è " + minutes + ":" + seconds.toString().padStart(2, '0');
            
            if (this.currentSeconds <= 10) {
              timerElement.style.color = '#ef4444';
            } else if (this.currentSeconds <= 30) {
              timerElement.style.color = '#ff9800';
            }
          }
        } else {
          this.stopTimer();
          alert('‚è∞ ÎãµÎ≥Ä ÏãúÍ∞ÑÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§!');
        }
      }, 1000);
    }
  }

  handleNewAnswer(message) {
    console.log("üí¨ ÏÉà ÎãµÎ≥Ä Ï≤òÎ¶¨:", message);
    this.displayAnswer(message);
    this.showNotification(message.userName + "ÎãòÏù¥ ÎãµÎ≥ÄÏùÑ Ï†úÏ∂úÌñàÏäµÎãàÎã§.");
    
    if (message.answerId || message.id) {
      this.requestAIFeedback(message.answerId || message.id);
    }
  }

  requestAIFeedback(answerId) {
    const token = this.getTokenFromCookie();
    fetch("/api/feedback/ai/" + answerId, {
      method: 'POST',
      headers: { 
        'Authorization': token,
        'Content-Type': 'application/json'
      }
    }).then(response => {
      if (response.ok) return response.json();
    }).then(feedback => {
      console.log('‚úÖ AI ÌîºÎìúÎ∞± ÏöîÏ≤≠ ÏôÑÎ£å:', feedback);
    }).catch(error => {
      console.error('‚ùå AI ÌîºÎìúÎ∞± Ïã§Ìå®:', error);
    });
  }

  handleNewFeedback(message) {
    console.log("ü§ñ AI ÌîºÎìúÎ∞± Ï≤òÎ¶¨:", message);
    this.displayAIFeedback(message);
    this.showNotification("AI ÌîºÎìúÎ∞±Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.");
  }

  handleInterviewerFeedback(message) {
    console.log("üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞± Ï≤òÎ¶¨:", message);
    this.displayInterviewerFeedback(message);
    this.showNotification(message.reviewerName + "ÎãòÏù¥ ÌèâÍ∞ÄÌñàÏäµÎãàÎã§.");
  }

  updateParticipantsList(participants) {
    console.log("üë• Ï∞∏Í∞ÄÏûê Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏:", participants);
    
    const participantsListDiv = document.getElementById("participants-list");
    if (!participantsListDiv) return;
    
    if (!participants || participants.length === 0) {
        participantsListDiv.innerHTML = '<div class="empty-state">ÎåÄÍ∏∞ Ï§ë...</div>';
        return;
    }
    
    participantsListDiv.innerHTML = participants.map(participant => 
        `<div class="participant-item">
            <div class="participant-avatar">${participant.charAt(0).toUpperCase()}</div>
            <span>${participant}</span>
        </div>`
    ).join("");
    
    const participantCount = document.getElementById("participant-count");
    if (participantCount) {
        participantCount.textContent = (participants.length + 1) + "Î™Ö";
    }
}

  updateSessionStats(questionCount, answerCount) {
    const statsDiv = document.getElementById("session-stats");
    if (statsDiv) {
      statsDiv.innerHTML = `ÏßàÎ¨∏ ${questionCount || 0}Í∞ú ‚Ä¢ ÎãµÎ≥Ä ${answerCount || 0}Í∞ú`;
    }
    
    const answerCountSpan = document.getElementById("answer-count");
    if (answerCountSpan) {
      answerCountSpan.textContent = `${answerCount || 0}Í∞ú`;
    }
  }

  displayAnswer(answer) {
    const answersDiv = document.getElementById("answers-list");
    if (answersDiv) {
      const answerId = answer.answerId || answer.id;
      const existingAnswer = document.getElementById("answer-" + answerId);
      if (existingAnswer) return;
      
      const emptyState = answersDiv.querySelector(".empty-state");
      if (emptyState) emptyState.remove();
      
      const answerElement = document.createElement("div");
      answerElement.className = "answer-review-card";
      answerElement.id = "answer-" + answerId;
      answerElement.innerHTML = `
        <div class="answer-header">
          <div class="user-name-badge">${answer.userName}</div>
          <div class="answer-time">${new Date().toLocaleTimeString()}</div>
        </div>
        <div class="answer-text">${answer.answerText}</div>
        <div class="ai-feedback-section" id="ai-feedback-${answerId}">
          <div class="ai-feedback-loading">ü§ñ AI Î∂ÑÏÑù Ï§ë...</div>
        </div>
        <div class="interviewer-evaluation" id="evaluation-${answerId}">
          <div class="evaluation-header"><h5>Î©¥Ï†ëÍ¥Ä ÌèâÍ∞Ä</h5></div>
          <div class="score-input-group">
            <label>Ï†êÏàò (1-100):</label>
            <input type="number" min="1" max="100" value="70" id="score-${answerId}" class="score-input">
          </div>
          <div class="feedback-input-group">
            <label>ÌîºÎìúÎ∞±:</label>
            <textarea placeholder="Ïù¥ ÎãµÎ≥ÄÏóê ÎåÄÌïú ÌîºÎìúÎ∞±ÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî..." id="feedback-${answerId}" class="feedback-textarea"></textarea>
          </div>
          <button onclick="submitInterviewerFeedback(${answerId})" class="evaluation-submit-btn">ÌèâÍ∞Ä Ï†úÏ∂ú</button>
        </div>
      `;
      answersDiv.appendChild(answerElement);
    }
    
    const aiFeedbackList = document.getElementById("ai-feedback-list");
    if (aiFeedbackList) {
      const answerId = answer.answerId || answer.id;
      const existingFeedback = document.getElementById("student-ai-feedback-" + answerId);
      if (existingFeedback) return;
      
      const emptyState = aiFeedbackList.querySelector(".empty-state");
      if (emptyState) emptyState.remove();
      
      const feedbackCard = document.createElement("div");
      feedbackCard.className = "ai-feedback-section";
      feedbackCard.id = "student-ai-feedback-" + answerId;
      feedbackCard.innerHTML = '<div class="ai-feedback-loading">ü§ñ AIÍ∞Ä ÎãµÎ≥ÄÏùÑ Î∂ÑÏÑùÌïòÎäî Ï§ë...</div>';
      aiFeedbackList.appendChild(feedbackCard);
    }
  }

  displayAIFeedback(feedback) {
    const answerId = feedback.answerId || feedback.id;
    
    const aiSection = document.getElementById("ai-feedback-" + answerId);
    if (aiSection) {
        aiSection.innerHTML = `
            <div class="ai-feedback-content">
                <div class="ai-feedback-header">ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º</div>
                <div class="ai-score">Ï†êÏàò: ${feedback.score || 75}/100</div>
                <div class="ai-strengths"><strong>Í∞ïÏ†ê:</strong> ${feedback.strengths || 'Î∂ÑÏÑù Ï§ë...'}</div>
                <div class="ai-improvements"><strong>Í∞úÏÑ†Ï†ê:</strong> ${feedback.weaknesses || feedback.improvements || 'Î∂ÑÏÑù Ï§ë...'}</div>
            </div>
        `;
    }
    
    const studentAiSection = document.getElementById("student-ai-feedback-" + answerId);
    if (studentAiSection) {
        studentAiSection.innerHTML = `
            <div class="ai-feedback-content">
                <div class="ai-feedback-header">ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º</div>
                <div class="ai-score">Ï†êÏàò: ${feedback.score || 75}/100</div>
                <div class="ai-strengths"><strong>Í∞ïÏ†ê:</strong> ${feedback.strengths || 'Î∂ÑÏÑù Ï§ë...'}</div>
                <div class="ai-improvements"><strong>Í∞úÏÑ†Ï†ê:</strong> ${feedback.weaknesses || feedback.improvements || 'Î∂ÑÏÑù Ï§ë...'}</div>
            </div>
        `;
    }
}

  displayInterviewerFeedback(feedback) {
    const answerId = feedback.answerId || feedback.id;
    const answerElement = document.getElementById("answer-" + answerId);
    if (!answerElement) return;
    
    const evaluationDiv = document.getElementById("evaluation-" + answerId);
    if (evaluationDiv) evaluationDiv.remove();
    
    const existingFeedback = answerElement.querySelectorAll(".interviewer-feedback");
    existingFeedback.forEach(el => el.remove());
    
    const feedbackHtml = `
      <div class="interviewer-feedback">
        <div class="interviewer-feedback-title">üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞±</div>
        <div class="interviewer-name">Î©¥Ï†ëÍ¥Ä: ${feedback.reviewerName}</div>
        <div class="feedback-score">
          <strong>Ï†êÏàò:</strong> <span class="score-badge">${feedback.score}/100</span>
        </div>
        <div class="feedback-comment"><strong>ÏΩîÎ©òÌä∏:</strong> ${feedback.comment}</div>
        <div class="text-muted">${new Date().toLocaleTimeString()}</div>
      </div>
    `;
    answerElement.insertAdjacentHTML("beforeend", feedbackHtml);
  }

  showNotification(message) {
    console.log('üì¢ ÏïåÎ¶º:', message);
    const notificationDiv = document.createElement('div');
    notificationDiv.textContent = message;
    notificationDiv.style.cssText = 'position: fixed; top: 80px; right: 20px; background: #667eea; color: white; padding: 12px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10000; animation: slideIn 0.3s ease-out; font-weight: 500;';
    document.body.appendChild(notificationDiv);
    setTimeout(() => {
      notificationDiv.style.animation = 'slideOut 0.3s ease-in';
      setTimeout(() => document.body.removeChild(notificationDiv), 300);
    }, 3000);
  }

  disconnect() {
    if (this.connected) {
      this.leaveSession();
      this.stompClient.disconnect();
      this.connected = false;
    }
  }
}

window.sendQuestion = function() {
  console.log('üìù sendQuestion Ìò∏Ï∂úÎê®');
  const questionText = document.getElementById("newQuestionText").value;
  const orderNo = document.getElementById("newQuestionOrder").value;
  const timerOrder = document.getElementById("newTimerOrder").value;
  
  if (!questionText.trim()) {
    alert("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
    return;
  }
  
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.sendQuestion(questionText, parseInt(orderNo) || 1, parseInt(timerOrder) || 60);
    document.getElementById("newQuestionText").value = "";
    document.getElementById("newQuestionOrder").value = parseInt(orderNo) + 1;
  } else {
    alert("WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
  }
};

window.submitAnswer = function() {
  console.log('üí¨ submitAnswer Ìò∏Ï∂úÎê®');
  const questionId = document.getElementById("currentQuestionId").value;
  const answerText = document.getElementById("answerText").value;
  
  if (!answerText.trim()) {
    alert("ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
    return;
  }
  
  if (!questionId) {
    alert("ÌòÑÏû¨ ÎãµÎ≥ÄÌï† ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.");
    return;
  }
  
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.submitAnswer(questionId, answerText);
    document.getElementById("answerText").value = "";
    alert('‚úÖ ÎãµÎ≥ÄÏù¥ Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§!');
  } else {
    alert("WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
  }
};

window.submitInterviewerFeedback = function(answerId) {
  console.log('üëî submitInterviewerFeedback Ìò∏Ï∂úÎê®:', answerId);
  const scoreInput = document.getElementById("score-" + answerId);
  const feedbackTextarea = document.getElementById("feedback-" + answerId);
  const evaluationDiv = document.getElementById("evaluation-" + answerId);
  
  if (!scoreInput || !feedbackTextarea) return;
  
  const score = scoreInput.value;
  const feedbackText = feedbackTextarea.value;
  
  if (!feedbackText.trim()) {
    alert('ÌîºÎìúÎ∞±ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
    return;
  }
  
  const submitBtn = evaluationDiv ? evaluationDiv.querySelector(".evaluation-submit-btn") : null;
  if (submitBtn && submitBtn.disabled) return;
  
  if (submitBtn) {
    submitBtn.disabled = true;
    submitBtn.textContent = 'Ï†úÏ∂ú Ï§ë...';
  }
  
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.submitInterviewerFeedback(answerId, parseInt(score), feedbackText);
    setTimeout(() => {
      if (evaluationDiv) {
        evaluationDiv.innerHTML = `<div class="submitted-evaluation">‚úÖ ÌèâÍ∞Ä ÏôÑÎ£å (Ï†êÏàò: ${score}/100)</div>`;
      }
    }, 300);
  }
};