class MockerViewWebSocket {
  constructor(sessionId, userId, userName) {
    this.sessionId = sessionId;
    this.userId = userId;
    this.userName = userName;
    this.stompClient = null;
    this.connected = false;
    this.timerInterval = null;
    this.currentSeconds = 0;
  }

  connect() {
    const token = this.getTokenFromCookie();
    if (!token) {
      console.error('ÌÜ†ÌÅ∞ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
      alert('Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    console.log('ÌÜ†ÌÅ∞ Ï†ÑÏÜ°:', token.substring(0, 20) + '...');
    const socket = new SockJS("/ws?token=" + encodeURIComponent(token));
    this.stompClient = Stomp.over(socket);
    this.stompClient.connect({}, (frame) => {
      console.log("WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ");
      this.connected = true;
      window.stompClient = this.stompClient;
      window.mockerViewWS = this;
      this.subscribeToTopics();
      this.joinSession();
    }, (error) => {
      console.error("WebSocket Ïó∞Í≤∞ Ïã§Ìå®:", error);
      alert('WebSocket Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ® Ìï¥Ï£ºÏÑ∏Ïöî.');
      this.connected = false;
    });
  }

  getTokenFromCookie() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'Authorization') {
        return value;
      }
    }
    return null;
  }

  subscribeToTopics() {
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/status`, (message) => {
      console.log('üìä Status ÏàòÏã†:', message.body);
      this.handleStatusUpdate(JSON.parse(message.body));
    });
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/question`, (message) => {
      console.log('‚ùì ÏßàÎ¨∏ ÏàòÏã†:', message.body);
      this.handleNewQuestion(JSON.parse(message.body));
    });
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/answer`, (message) => {
      console.log('üí¨ ÎãµÎ≥Ä ÏàòÏã†:', message.body);
      this.handleNewAnswer(JSON.parse(message.body));
    });
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/feedback`, (message) => {
      console.log('ü§ñ AI ÌîºÎìúÎ∞± ÏàòÏã†:', message.body);
      this.handleNewFeedback(JSON.parse(message.body));
    });
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/interviewer-feedback`, (message) => {
      console.log('üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞± ÏàòÏã†:', message.body);
      this.handleInterviewerFeedback(JSON.parse(message.body));
    });
    this.stompClient.subscribe(`/topic/session/${this.sessionId}/control`, (message) => {
      console.log('üéÆ Ï†úÏñ¥ Î©îÏãúÏßÄ ÏàòÏã†:', message.body);
      this.handleControlMessage(JSON.parse(message.body));
    });
  }

  handleControlMessage(data) {
    const badge = document.getElementById('sessionStatusBadge');
    if (data.action === 'START') {
      alert('Î©¥Ï†ëÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!');
      if (badge) {
        badge.textContent = 'ÏßÑÌñâÏ§ë';
        badge.className = 'status-badge ongoing';
      }
    } else if (data.action === 'PAUSE') {
      alert('Î©¥Ï†ëÏù¥ ÏùºÏãúÏ†ïÏßÄÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'ÏùºÏãúÏ†ïÏßÄ';
        badge.className = 'status-badge paused';
      }
    } else if (data.action === 'RESUME') {
      alert('Î©¥Ï†ëÏù¥ Ïû¨Í∞úÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'ÏßÑÌñâÏ§ë';
        badge.className = 'status-badge ongoing';
      }
    } else if (data.action === 'END') {
      alert('Î©¥Ï†ëÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
      if (badge) {
        badge.textContent = 'Ï¢ÖÎ£åÎê®';
        badge.className = 'status-badge ended';
      }
    }
  }

  joinSession() {
    if (this.connected) {
      this.stompClient.send(`/app/session/${this.sessionId}/join`, {}, JSON.stringify({
        sessionId: this.sessionId,
        userId: this.userId,
        userName: this.userName,
        action: "JOIN"
      }));
    }
  }

  leaveSession() {
    if (this.connected) {
      this.stompClient.send(`/app/session/${this.sessionId}/leave`, {}, JSON.stringify({
        sessionId: this.sessionId,
        userId: this.userId,
        userName: this.userName,
        action: "LEAVE"
      }));
    }
  }

  sendQuestion(questionText, orderNo, timer) {
    if (!this.connected) {
      alert('WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }
    console.log('üì§ ÏßàÎ¨∏ Ï†ÑÏÜ° ÏãúÏûë:', { questionText, orderNo, timer });
    const payload = {
      text: questionText,
      orderNo: parseInt(orderNo) || 1,
      timerSeconds: parseInt(timer) || 60,
      sessionId: this.sessionId
    };
    console.log('üì§ Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞:', payload);
    this.stompClient.send(`/app/session/${this.sessionId}/question`, {}, JSON.stringify(payload));
  }

  sendControlMessage(action) {
    if (this.connected) {
      console.log('üéÆ Ï†úÏñ¥ Î©îÏãúÏßÄ Ï†ÑÏÜ°:', action);
      this.stompClient.send(`/app/session/${this.sessionId}/control`, {}, JSON.stringify({
        action: action,
        timestamp: new Date().toISOString()
      }));
    }
  }

  stopTimer() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = null;
    }
  }

  submitAnswer(questionId, answerText) {
    if (this.connected) {
      this.stompClient.send(`/app/session/${this.sessionId}/answer`, {}, JSON.stringify({
        sessionId: this.sessionId,
        questionId: parseInt(questionId),
        userId: this.userId,
        userName: this.userName,
        answerText: answerText
      }));
    }
  }

  submitInterviewerFeedback(answerId, score, comment) {
    if (this.connected) {
      this.stompClient.send(`/app/session/${this.sessionId}/interviewer-feedback`, {}, JSON.stringify({
        sessionId: this.sessionId,
        answerId: answerId,
        reviewerId: this.userId,
        reviewerName: this.userName,
        score: score,
        comment: comment
      }));
    }
  }

  handleStatusUpdate(message) {
    console.log("üìä Status update:", message);
    if (message.participants && Array.isArray(message.participants)) {
      this.updateParticipantsList(message.participants);
    }
    if (message.questionCount !== undefined && message.answerCount !== undefined) {
      this.updateSessionStats(message.questionCount, message.answerCount);
    }
    if (message.action === "JOIN" && message.userName) {
      this.showNotification(message.userName + "ÎãòÏù¥ ÏûÖÏû•ÌñàÏäµÎãàÎã§. üëã");
    } else if (message.action === "LEAVE" && message.userName) {
      this.showNotification(message.userName + "ÎãòÏù¥ Ìá¥Ïû•ÌñàÏäµÎãàÎã§. üëã");
    }
    if (message.status) {
      const badge = document.getElementById('sessionStatusBadge');
      if (badge) {
        if (message.status === 'RUNNING') {
          badge.textContent = 'ÏßÑÌñâÏ§ë';
          badge.className = 'status-badge ongoing';
        } else if (message.status === 'PAUSED') {
          badge.textContent = 'ÏùºÏãúÏ†ïÏßÄ';
          badge.className = 'status-badge paused';
        } else if (message.status === 'ENDED') {
          badge.textContent = 'Ï¢ÖÎ£åÎê®';
          badge.className = 'status-badge ended';
        } else {
          badge.textContent = 'ÎåÄÍ∏∞Ï§ë';
          badge.className = 'status-badge waiting';
        }
      }
    }
  }

  handleNewQuestion(message) {
    console.log("‚ùì ÏÉà ÏßàÎ¨∏ Ï≤òÎ¶¨:", message);
    const questionTextElement = document.getElementById('current-question-text');
    if (questionTextElement) {
      questionTextElement.textContent = message.questionText || 'ÏßàÎ¨∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...';
    }
    const questionIdInput = document.getElementById("currentQuestionId");
    if (questionIdInput) {
      questionIdInput.value = message.questionId || "";
    }
    const questionNumber = document.getElementById("question-number");
    if (questionNumber) {
      questionNumber.textContent = "Q" + (message.orderNo || 1);
    }
    if (message.timer && message.timer > 0) {
      this.currentSeconds = message.timer;
      this.stopTimer();
      const timerElement = document.getElementById('question-timer');
      const self = this;
      this.timerInterval = setInterval(function() {
        if (self.currentSeconds > 0) {
          self.currentSeconds--;
          const minutes = Math.floor(self.currentSeconds / 60);
          const seconds = self.currentSeconds % 60;
          if (timerElement) {
            timerElement.textContent = "‚è±Ô∏è " + minutes + ":" + seconds.toString().padStart(2, '0');
            if (self.currentSeconds <= 10) {
              timerElement.style.color = '#ef4444';
            } else if (self.currentSeconds <= 30) {
              timerElement.style.color = '#ff9800';
            }
          }
        } else {
          self.stopTimer();
          alert('‚è∞ ÎãµÎ≥Ä ÏãúÍ∞ÑÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§!');
        }
      }, 1000);
    }
  }

  handleNewAnswer(message) {
    console.log("üí¨ ÏÉà ÎãµÎ≥Ä Ï≤òÎ¶¨:", message);
    this.displayAnswer(message);
    this.showNotification(message.userName + "ÎãòÏù¥ ÎãµÎ≥ÄÏùÑ Ï†úÏ∂úÌñàÏäµÎãàÎã§.");
    if (message.answerId) {
      this.requestAIFeedback(message.answerId);
    }
  }

  requestAIFeedback(answerId) {
    const token = this.getTokenFromCookie();
    fetch("/api/feedback/ai/" + answerId, {
      method: 'POST',
      headers: { 
        'Authorization': token,
        'Content-Type': 'application/json'
      }
    }).then(function(response) {
      if (response.ok) {
        return response.json();
      }
    }).then(function(feedback) {
      console.log('‚úÖ AI ÌîºÎìúÎ∞± ÏÉùÏÑ±Îê®:', feedback);
    }).catch(function(error) {
      console.error('‚ùå AI ÌîºÎìúÎ∞± ÏöîÏ≤≠ Ïã§Ìå®:', error);
    });
  }

  handleNewFeedback(message) {
    console.log("ü§ñ AI ÌîºÎìúÎ∞± Ï≤òÎ¶¨:", message);
    this.displayAIFeedback(message);
    this.showNotification("AI ÌîºÎìúÎ∞±Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.");
  }

  handleInterviewerFeedback(message) {
    console.log("üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞± Ï≤òÎ¶¨:", message);
    this.displayInterviewerFeedback(message);
    this.showNotification(message.reviewerName + "ÎãòÏù¥ Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞±ÏùÑ Ï£ºÏóàÏäµÎãàÎã§.");
  }

  updateParticipantsList(participants) {
    console.log("üë• Ï∞∏Í∞ÄÏûê Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏:", participants);
    const participantsListDiv = document.getElementById("participants-list");
    if (!participantsListDiv) {
      return;
    }
    if (!participants || participants.length === 0) {
      participantsListDiv.innerHTML = '<div class="empty-state">Ï∞∏Í∞ÄÏûê ÏóÜÏùå</div>';
      return;
    }
    participantsListDiv.innerHTML = participants.map(function(participant) {
      return '<div class="participant-item"><div class="participant-avatar">' + 
        participant.charAt(0).toUpperCase() + 
        '</div><div class="participant-info"><div class="participant-name">' + 
        participant + 
        '</div><div class="participant-status">üü¢ Ïò®ÎùºÏù∏</div></div></div>';
    }).join("");
    const participantCount = document.getElementById("participant-count");
    if (participantCount) {
      participantCount.textContent = "Ï∞∏Í∞ÄÏûê " + participants.length + "Î™Ö";
    }
  }

  updateSessionStats(questionCount, answerCount) {
    const statsDiv = document.getElementById("session-stats");
    if (statsDiv) {
      statsDiv.innerHTML = "ÏßàÎ¨∏ " + (questionCount || 0) + "Í∞ú ‚Ä¢ ÎãµÎ≥Ä " + (answerCount || 0) + "Í∞ú";
    }
    const questionCountSpan = document.getElementById("question-count");
    if (questionCountSpan) {
      questionCountSpan.textContent = "ÏßàÎ¨∏ " + (questionCount || 0) + "Í∞ú";
    }
    const answerCountSpan = document.getElementById("answer-count");
    if (answerCountSpan) {
      answerCountSpan.textContent = (answerCount || 0) + "Í∞ú";
    }
  }

  displayAnswer(answer) {
    const answersDiv = document.getElementById("answers-list");
    if (answersDiv) {
      const existingAnswer = document.getElementById("answer-" + answer.answerId);
      if (existingAnswer) {
        console.log("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎãµÎ≥Ä Ïπ¥Îìú:", answer.answerId);
        return;
      }
      
      const emptyState = answersDiv.querySelector(".empty-state");
      if (emptyState) {
        emptyState.remove();
      }
      const answerElement = document.createElement("div");
      answerElement.className = "answer-review-card";
      answerElement.id = "answer-" + answer.answerId;
      answerElement.innerHTML = '<div class="answer-header"><div class="user-name-badge">' + answer.userName + '</div><div class="answer-time">' + new Date().toLocaleTimeString() + '</div></div><div class="answer-text">' + answer.answerText + '</div><div class="ai-feedback-section" id="ai-feedback-' + answer.answerId + '"><div class="ai-feedback-loading">ü§ñ AI Î∂ÑÏÑù Ï§ë...</div></div><div class="interviewer-evaluation" id="evaluation-' + answer.answerId + '"><div class="evaluation-header"><h5>Î©¥Ï†ëÍ¥Ä ÌèâÍ∞Ä</h5></div><div class="score-input-group"><label>Ï†êÏàò (1-100):</label><input type="number" min="1" max="100" value="70" id="score-' + answer.answerId + '" class="score-input"></div><div class="feedback-input-group"><label>ÌîºÎìúÎ∞±:</label><textarea placeholder="Ïù¥ ÎãµÎ≥ÄÏóê ÎåÄÌïú ÌîºÎìúÎ∞±ÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî..." id="feedback-' + answer.answerId + '" class="feedback-textarea"></textarea></div><button onclick="window.submitInterviewerFeedback(' + answer.answerId + ')" class="evaluation-submit-btn">ÌèâÍ∞Ä Ï†úÏ∂ú</button></div>';
      answersDiv.appendChild(answerElement);
    }
    
    const aiFeedbackList = document.getElementById("ai-feedback-list");
    if (aiFeedbackList) {
      const existingFeedback = document.getElementById("student-ai-feedback-" + answer.answerId);
      if (existingFeedback) {
        console.log("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî AI ÌîºÎìúÎ∞± Ïπ¥Îìú:", answer.answerId);
        return;
      }
      
      const emptyState = aiFeedbackList.querySelector(".empty-state");
      if (emptyState) {
        emptyState.remove();
      }
      const feedbackCard = document.createElement("div");
      feedbackCard.className = "ai-feedback-section";
      feedbackCard.id = "student-ai-feedback-" + answer.answerId;
      feedbackCard.innerHTML = '<div class="ai-feedback-loading">ü§ñ AIÍ∞Ä ÎãµÎ≥ÄÏùÑ Î∂ÑÏÑùÌïòÎäî Ï§ë...</div>';
      aiFeedbackList.appendChild(feedbackCard);
    }
  }

  displayAIFeedback(feedback) {
    const aiSection = document.getElementById("ai-feedback-" + feedback.answerId);
    if (aiSection) {
      aiSection.innerHTML = '<div class="ai-feedback-content"><div class="ai-feedback-header">ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º</div><div class="ai-score">Ï†êÏàò: ' + (feedback.score || 75) + '/100</div><div class="ai-strengths"><strong>Í∞ïÏ†ê:</strong> ' + (feedback.strengths || 'Î∂ÑÏÑù Ï§ë...') + '</div><div class="ai-improvements"><strong>Í∞úÏÑ†Ï†ê:</strong> ' + (feedback.weaknesses || feedback.improvements || 'Î∂ÑÏÑù Ï§ë...') + '</div></div>';
    }
    const studentAiSection = document.getElementById("student-ai-feedback-" + feedback.answerId);
    if (studentAiSection) {
      studentAiSection.innerHTML = '<div class="ai-feedback-content"><div class="ai-feedback-header">ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º</div><div class="ai-score">Ï†êÏàò: ' + (feedback.score || 75) + '/100</div><div class="ai-strengths"><strong>Í∞ïÏ†ê:</strong> ' + (feedback.strengths || 'Î∂ÑÏÑù Ï§ë...') + '</div><div class="ai-improvements"><strong>Í∞úÏÑ†Ï†ê:</strong> ' + (feedback.weaknesses || feedback.improvements || 'Î∂ÑÏÑù Ï§ë...') + '</div></div>';
    }
  }

  displayInterviewerFeedback(feedback) {
    console.log("üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞± ÌëúÏãú:", feedback);
    const answerElement = document.getElementById("answer-" + feedback.answerId);
    if (!answerElement) {
      console.warn("ÎãµÎ≥Ä Ïπ¥ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:", feedback.answerId);
      return;
    }
    
    const evaluationDiv = document.getElementById("evaluation-" + feedback.answerId);
    if (evaluationDiv) {
      evaluationDiv.remove();
    }
    
    const existingFeedback = answerElement.querySelectorAll(".interviewer-feedback");
    existingFeedback.forEach(function(el) {
      el.remove();
    });
    
    const feedbackHtml = '<div class="interviewer-feedback"><div class="interviewer-feedback-title">üëî Î©¥Ï†ëÍ¥Ä ÌîºÎìúÎ∞±</div><div class="interviewer-name">Î©¥Ï†ëÍ¥Ä: ' + feedback.reviewerName + '</div><div class="feedback-score"><strong>Ï†êÏàò:</strong> <span class="score-badge">' + feedback.score + '/100</span></div><div class="feedback-comment"><strong>ÏΩîÎ©òÌä∏:</strong> ' + feedback.comment + '</div><div class="text-muted">' + new Date().toLocaleTimeString() + '</div></div>';
    
    answerElement.insertAdjacentHTML("beforeend", feedbackHtml);
  }

  showNotification(message) {
    console.log('üì¢ ÏïåÎ¶º:', message);
    const notificationDiv = document.createElement('div');
    notificationDiv.className = 'toast-notification';
    notificationDiv.textContent = message;
    notificationDiv.style.cssText = 'position: fixed; top: 80px; right: 20px; background: #667eea; color: white; padding: 12px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10000; animation: slideIn 0.3s ease-out; font-weight: 500;';
    document.body.appendChild(notificationDiv);
    setTimeout(function() {
      notificationDiv.style.animation = 'slideOut 0.3s ease-in';
      setTimeout(function() {
        document.body.removeChild(notificationDiv);
      }, 300);
    }, 3000);
  }

  disconnect() {
    if (this.connected) {
      this.leaveSession();
      this.stompClient.disconnect();
      this.connected = false;
    }
  }
}

var mockerViewWS = null;

function initializeWebSocket(sessionId, userId, userName) {
  mockerViewWS = new MockerViewWebSocket(sessionId, userId, userName);
  window.mockerViewWS = mockerViewWS;
  mockerViewWS.connect();
  window.addEventListener("beforeunload", function() {
    if (mockerViewWS) {
      mockerViewWS.disconnect();
    }
  });
}

window.sendQuestion = function() {
  var questionText = document.getElementById("newQuestionText").value;
  var orderNo = document.getElementById("newQuestionOrder").value;
  var timerOrder = document.getElementById("newTimerOrder").value;
  if (!questionText.trim()) {
    alert("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
    return;
  }
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.sendQuestion(questionText, parseInt(orderNo) || 1, parseInt(timerOrder) || 60);
    document.getElementById("newQuestionText").value = "";
    document.getElementById("newQuestionOrder").value = parseInt(orderNo) + 1;
  } else {
    alert("WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
  }
};

window.submitAnswer = function() {
  var questionId = document.getElementById("currentQuestionId").value;
  var answerText = document.getElementById("answerText").value;
  if (!answerText.trim()) {
    alert("ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
    return;
  }
  if (!questionId) {
    alert("ÌòÑÏû¨ ÎãµÎ≥ÄÌï† ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.");
    return;
  }
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.submitAnswer(questionId, answerText);
    document.getElementById("answerText").value = "";
  } else {
    alert("WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
  }
};

window.submitInterviewerFeedback = function(answerId) {
  var scoreInput = document.getElementById("score-" + answerId);
  var feedbackTextarea = document.getElementById("feedback-" + answerId);
  var evaluationDiv = document.getElementById("evaluation-" + answerId);
  
  if (!scoreInput || !feedbackTextarea) {
    console.error("ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§");
    return;
  }
  
  var score = scoreInput.value;
  var feedbackText = feedbackTextarea.value;
  
  if (!feedbackText.trim()) {
    alert('ÌîºÎìúÎ∞±ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
    return;
  }
  
  var submitBtn = evaluationDiv ? evaluationDiv.querySelector(".evaluation-submit-btn") : null;
  if (submitBtn && submitBtn.disabled) {
    console.log("Ïù¥ÎØ∏ Ï†úÏ∂ú Ï§ëÏûÖÎãàÎã§");
    return;
  }
  
  if (submitBtn) {
    submitBtn.disabled = true;
    submitBtn.textContent = 'Ï†úÏ∂ú Ï§ë...';
  }
  
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.submitInterviewerFeedback(answerId, parseInt(score), feedbackText);
    
    setTimeout(function() {
      if (evaluationDiv) {
        evaluationDiv.innerHTML = '<div class="submitted-evaluation">‚úÖ ÌèâÍ∞Ä Ï†úÏ∂ú ÏôÑÎ£å (Ï†êÏàò: ' + score + '/100)</div>';
      }
    }, 300);
  }
};

window.resumeInterview = function() {
  if (window.mockerViewWS && window.mockerViewWS.connected) {
    window.mockerViewWS.sendControlMessage('RESUME');
    document.getElementById('pauseInterviewBtn').textContent = 'ÏùºÏãúÏ†ïÏßÄ';
    document.getElementById('pauseInterviewBtn').onclick = window.pauseInterview;
  }
};

window.endInterview = function() {
  if (confirm('Î©¥Ï†ëÏùÑ Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏ¢ÖÎ£å ÌõÑÏóêÎäî ÎãµÎ≥ÄÏùÑ Ï†úÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.')) {
    if (window.mockerViewWS && window.mockerViewWS.connected) {
      window.mockerViewWS.sendControlMessage('END');
      document.getElementById('pauseInterviewBtn').style.display = 'none';
      document.getElementById('endInterviewBtn').style.display = 'none';
      alert('Î©¥Ï†ëÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
      setTimeout(function() {
        window.location.href = "/session/detail/" + SESSION_DATA.sessionId;
      }, 2000);
    }
  }
};