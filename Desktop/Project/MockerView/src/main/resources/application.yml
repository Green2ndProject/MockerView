spring:
  application:
    name: mockerview
  
  main:
    allow-bean-definition-overriding: true

  jwt:
    secret: 0y0KPgwYtmYq1AoSfRRJav2/ImhCV6ueHW0Le+MEeCQ=

  profiles:
    active: dev

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 100MB

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
        enable_lazy_load_no_trans: true

  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
  
  cache:
    type: redis
    redis:
      time-to-live: 600000

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  security:
    user:
      name: admin
      password: admin
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: email,profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope: profile_nickname,account_email
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

server:
  port: 8080
  address: 0.0.0.0
  connection-timeout: 300000
  tomcat:
    connection-timeout: 300000
    threads:
      max: 200
      min-spare: 10

logging:
  level:
    com.mockerview: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.security: DEBUG
    org.springframework.messaging: DEBUG

openai:
  api:
    key: ${OPENAI_API_KEY}
    url: https://api.openai.com/v1/chat/completions

agora:
  app-id: ${AGORA_APP_ID}
  app-certificate: ${AGORA_APP_CERTIFICATE:}
  token-expiration: 3600

vapid:
  public:
    key: ${VAPID_PUBLIC_KEY}
  private:
    key: ${VAPID_PRIVATE_KEY}
  subject: ${VAPID_SUBJECT}

cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}

admin:
  username: ${ADMIN_USERNAME:mockerview}
  password: ${ADMIN_PASSWORD:mockerview}
  name: ${ADMIN_NAME:MockerView}
  email: ${ADMIN_EMAIL:admin@mockerview.net}

recaptcha:
  site-key: ${RECAPTCHA_SITE_KEY}
  secret-key: ${RECAPTCHA_SECRET_KEY}
  verify-url: https://www.google.com/recaptcha/api/siteverify

---
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: jdbc:postgresql://localhost:5433/mockerview
    username: postgres
    password: mockerview
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      host: localhost
      port: 6379

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        connection:
          isolation: 4

server:
  servlet:
    session:
      cookie:
        secure: false

logging:
  level:
    com.mockerview: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.messaging: DEBUG

agora:
  app-id: ${AGORA_APP_ID}
  app-certificate: ${AGORA_APP_CERTIFICATE:}

---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ${DATABASE_URL:${SPRING_DATASOURCE_URL}}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:}
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 150MB

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true

  thymeleaf:
    cache: true

server:
  port: ${PORT:8080}
  servlet:
    session:
      cookie:
        secure: true
        same-site: lax
        http-only: true

logging:
  level:
    com.mockerview: INFO
    org.springframework.web.socket: INFO
    org.springframework.messaging: INFO
    root: INFO