ALTER SESSION SET CONTAINER = XEPDB1;

CREATE USER mockerview IDENTIFIED BY mockerview;
GRANT CONNECT, RESOURCE, DBA TO mockerview;
ALTER USER mockerview QUOTA UNLIMITED ON USERS;

CONNECT mockerview/mockerview@XEPDB1;

CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    role VARCHAR2(20),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    email VARCHAR2(255),
    password VARCHAR2(255),
    username VARCHAR2(255)
);

CREATE TABLE sessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    host_id NUMBER,
    title VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status VARCHAR2(20),
    session_type VARCHAR2(20) DEFAULT 'GROUP',
    is_reviewable CHAR(1) DEFAULT 'Y',
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_sessions_host FOREIGN KEY (host_id) REFERENCES users(id)
);

CREATE TABLE questions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER,
    question_text CLOB NOT NULL,
    order_no NUMBER,
    questioner_id NUMBER,
    timer NUMBER(10),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_questions_session FOREIGN KEY (session_id) REFERENCES sessions(id)
);

CREATE TABLE answers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id NUMBER,
    user_id NUMBER,
    answer_text CLOB NOT NULL,
    score NUMBER,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_answers_question FOREIGN KEY (question_id) REFERENCES questions(id),
    CONSTRAINT fk_answers_user FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE feedbacks (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    answer_id NUMBER,
    summary CLOB,
    strengths CLOB,
    weaknesses CLOB,
    improvement CLOB,
    model VARCHAR2(50) DEFAULT 'GPT-4',
    reviewer_id NUMBER,
    score NUMBER(10),
    reviewer_comment CLOB,
    feedback_type VARCHAR2(20),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_feedbacks_answer FOREIGN KEY (answer_id) REFERENCES answers(id)
);

CREATE TABLE question_pool (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category VARCHAR2(50) NOT NULL,
    difficulty VARCHAR2(20),
    question_text CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE reviews (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER,
    reviewer_id NUMBER,
    answer_id NUMBER,
    review_comment CLOB,
    rating NUMBER(2,1),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_reviews_session FOREIGN KEY (session_id) REFERENCES sessions(id),
    CONSTRAINT fk_reviews_reviewer FOREIGN KEY (reviewer_id) REFERENCES users(id),
    CONSTRAINT fk_reviews_answer FOREIGN KEY (answer_id) REFERENCES answers(id)
);

ALTER TABLE users ADD is_deleted NUMBER(1) DEFAULT 0 NOT NULL;
ALTER TABLE users ADD CONSTRAINT chk_is_deleted CHECK (is_deleted IN (0, 1));
ALTER TABLE users ADD deleted_at DATE;
ALTER TABLE users ADD withdrawal_reason VARCHAR2(255);

ALTER TABLE sessions ADD CONSTRAINT chk_session_type CHECK (session_type IN ('GROUP', 'SELF', 'TEXT', 'AUDIO', 'VIDEO'));
ALTER TABLE sessions ADD CONSTRAINT chk_status CHECK (status IN ('PLANNED','RUNNING','ENDED'));
ALTER TABLE sessions ADD CONSTRAINT chk_is_reviewable CHECK (is_reviewable IN ('Y','N'));
ALTER TABLE sessions ADD is_self_interview CHAR(1) DEFAULT 'N';
ALTER TABLE sessions ADD agora_channel VARCHAR2(255);
ALTER TABLE sessions ADD media_enabled NUMBER(1) DEFAULT 0;
ALTER TABLE sessions ADD last_activity TIMESTAMP;
ALTER TABLE sessions ADD CONSTRAINT chk_media_enabled CHECK (media_enabled IN (0,1));
ALTER TABLE sessions ADD expires_at TIMESTAMP;

UPDATE sessions SET expires_at = created_at + INTERVAL '3' HOUR WHERE expires_at IS NULL;

CREATE INDEX idx_sessions_expires ON sessions(expires_at);
CREATE INDEX idx_sessions_status_expires ON sessions(status, expires_at);

ALTER TABLE answers ADD CONSTRAINT chk_score CHECK (score BETWEEN 1 AND 10);

ALTER TABLE feedbacks ADD CONSTRAINT chk_feedback_type CHECK (feedback_type IN ('AI','INTERVIEWER'));

ALTER TABLE question_pool ADD CONSTRAINT chk_difficulty CHECK (difficulty IN ('EASY','MEDIUM','HARD'));

ALTER TABLE reviews ADD CONSTRAINT chk_rating CHECK (rating BETWEEN 0.0 AND 5.0);

INSERT INTO question_pool (category, difficulty, question_text) VALUES ('기술', 'EASY', 'Java의 JVM 구조에 대해 설명해주세요.');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('기술', 'MEDIUM', 'Spring과 Spring Boot의 차이점은 무엇인가요?');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('기술', 'HARD', 'RESTful API 설계 원칙과 실제 프로젝트 적용 경험을 말씀해주세요.');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('인성', 'EASY', '자신의 장점과 단점을 말씀해주세요.');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('인성', 'MEDIUM', '팀 프로젝트에서 갈등을 해결한 경험이 있나요?');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('상황', 'MEDIUM', '마감 기한이 촉박한 상황에서 어떻게 대처하시나요?');
INSERT INTO question_pool (category, difficulty, question_text) VALUES ('상황', 'HARD', '기술적 의견 충돌이 있을 때 어떻게 해결하시나요?');

COMMIT;