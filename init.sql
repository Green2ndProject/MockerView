ALTER SESSION SET CONTAINER = XEPDB1;

CREATE USER mockerview IDENTIFIED BY mockerview;
GRANT CONNECT, RESOURCE, DBA TO mockerview;
ALTER USER mockerview QUOTA UNLIMITED ON USERS;

CONNECT mockerview/mockerview@XEPDB1;

CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    role VARCHAR2(20),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    email VARCHAR2(255),
    password VARCHAR2(255),
    username VARCHAR2(255)
);

CREATE TABLE sessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    host_id NUMBER,
    title VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status VARCHAR2(20),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    session_type VARCHAR2(20) DEFAULT 'GROUP',
    is_reviewable CHAR(1) DEFAULT 'Y',
    CONSTRAINT fk_sessions_host FOREIGN KEY (host_id) REFERENCES users(id)
);

CREATE TABLE questions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER,
    question_text CLOB NOT NULL,
    order_no NUMBER,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    questioner_id NUMBER(19),
    timer NUMBER(10),
    CONSTRAINT fk_questions_session FOREIGN KEY (session_id) REFERENCES sessions(id)
);

CREATE TABLE answers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id NUMBER,
    user_id NUMBER,
    answer_text CLOB NOT NULL,
    score NUMBER,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_answers_question FOREIGN KEY (question_id) REFERENCES questions(id),
    CONSTRAINT fk_answers_user FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE feedbacks (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    answer_id NUMBER,
    summary CLOB,
    strengths CLOB,
    weaknesses CLOB,
    improvement CLOB,
    model VARCHAR2(50) DEFAULT 'GPT-4',
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    reviewer_id NUMBER,
    score NUMBER(2),
    reviewer_comment CLOB,
    feedback_type VARCHAR2(20),
    CONSTRAINT fk_feedbacks_answer FOREIGN KEY (answer_id) REFERENCES answers(id)
);

CREATE TABLE question_pool (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category VARCHAR2(50) NOT NULL,
    difficulty VARCHAR2(20),
    text CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE reviews (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER,
    reviewer_id NUMBER,
    answer_id NUMBER,
    review_comment CLOB,
    rating NUMBER(2,1),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_reviews_session FOREIGN KEY (session_id) REFERENCES sessions(id),
    CONSTRAINT fk_reviews_reviewer FOREIGN KEY (reviewer_id) REFERENCES users(id),
    CONSTRAINT fk_reviews_answer FOREIGN KEY (answer_id) REFERENCES answers(id)
);

INSERT INTO question_pool (category, difficulty, text) VALUES ('기술', 'EASY', 'Java의 JVM 구조에 대해 설명해주세요.');
INSERT INTO question_pool (category, difficulty, text) VALUES ('기술', 'MEDIUM', 'Spring과 Spring Boot의 차이점은 무엇인가요?');
INSERT INTO question_pool (category, difficulty, text) VALUES ('기술', 'HARD', 'RESTful API 설계 원칙과 실제 프로젝트 적용 경험을 말씀해주세요.');
INSERT INTO question_pool (category, difficulty, text) VALUES ('인성', 'EASY', '자신의 장점과 단점을 말씀해주세요.');
INSERT INTO question_pool (category, difficulty, text) VALUES ('인성', 'MEDIUM', '팀 프로젝트에서 갈등을 해결한 경험이 있나요?');
INSERT INTO question_pool (category, difficulty, text) VALUES ('상황', 'MEDIUM', '마감 기한이 촉박한 상황에서 어떻게 대처하시나요?');
INSERT INTO question_pool (category, difficulty, text) VALUES ('상황', 'HARD', '기술적 의견 충돌이 있을 때 어떻게 해결하시나요?');

COMMIT;

ALTER TABLE QUESTIONS DROP COLUMN TEXT;

COMMIT;

ALTER TABLE ANSWERS DROP COLUMN text;

COMMIT;